{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coffea Processors\n",
    "This is a rendered copy of [processor.ipynb](https://github.com/CoffeaTeam/coffea/blob/master/binder/processor.ipynb). You can optionally run it interactively on [binder at this link](https://mybinder.org/v2/gh/coffeateam/coffea/master?filepath=binder%2Fprocessor.ipynb)\n",
    "\n",
    "Coffea relies mainly on [uproot](https://github.com/scikit-hep/uproot) to provide access to ROOT files for analysis.\n",
    "As a usual analysis will involve processing tens to thousands of files, totalling gigabytes to terabytes of data, there is a certain amount of work to be done to build a parallelized framework to process the data in a reasonable amount of time. Of course, one can work directly within uproot to achieve this, as we'll show in the beginning, but coffea provides the `coffea.processor` module, which allows users to worry just about the actual analysis code and not about how to implement efficient parallelization, assuming that the parallization is a trivial map-reduce operation (e.g. filling histograms and adding them together). The module provides the following key features:\n",
    "\n",
    " * A `ProcessorABC` abstract base class that can be derived from to implement the analysis code;\n",
    " * An interface to the arrays being read from the TTree, either [DataFrame](https://coffeateam.github.io/coffea/api/coffea.processor.LazyDataFrame.html#coffea.processor.LazyDataFrame) or [NanoEvents](https://coffeateam.github.io/coffea/api/coffea.nanoaod.NanoEvents.html#coffea.nanoaod.NanoEvents), to be used as inputs;\n",
    " * A set of accumulator types (value_accumulator, list_accumulator, set_accumulator, dict_accumulator, defaultdict_accumulator, column_accumulator) as described further [here](https://coffeateam.github.io/coffea/modules/coffea.processor.html#classes) to be used as output; and\n",
    " * A set of parallel executors to access multicore processing or distributed computing systems such as [Dask](https://distributed.dask.org/en/latest/), [Parsl](http://parsl-project.org/), [Spark](https://spark.apache.org/), and others.\n",
    "\n",
    "Let's start by writing a simple processor class that reads some CMS open data and plots a dimuon mass spectrum.\n",
    "We'll start by copying the [ProcessorABC](https://coffeateam.github.io/coffea/api/coffea.processor.ProcessorABC.html#coffea.processor.ProcessorABC) skeleton and filling in some details:\n",
    "\n",
    " * Remove `flag`, as we won't use it\n",
    " * Adding a new histogram for $m_{\\mu \\mu}$\n",
    " * Building a [JaggedCandidateArray](https://coffeateam.github.io/coffea/api/coffea.analysis_objects.JaggedCandidateMethods.html#coffea.analysis_objects.JaggedCandidateMethods.candidatesfromcounts) for muons,\n",
    " * Calculating the dimuon invariant mass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from coffea import hist, processor\n",
    "from coffea.analysis_objects import JaggedCandidateArray\n",
    "\n",
    "class MyProcessor(processor.ProcessorABC):\n",
    "    def __init__(self):\n",
    "        self._accumulator = processor.dict_accumulator({\n",
    "            \"sumw\": processor.defaultdict_accumulator(float),\n",
    "            \"mass\": hist.Hist(\n",
    "                \"Events\",\n",
    "                hist.Cat(\"dataset\", \"Dataset\"),\n",
    "                hist.Bin(\"mass\", \"$m_{\\mu\\mu}$ [GeV]\", 60, 60, 120),\n",
    "            ),\n",
    "        })\n",
    "\n",
    "    @property\n",
    "    def accumulator(self):\n",
    "        return self._accumulator\n",
    "\n",
    "    def process(self, df):\n",
    "        output = self.accumulator.identity()\n",
    "\n",
    "        dataset = df['dataset']\n",
    "        muons = JaggedCandidateArray.candidatesfromcounts(\n",
    "            df['nMuon'],\n",
    "            pt=df['Muon_pt'].content,\n",
    "            eta=df['Muon_eta'].content,\n",
    "            phi=df['Muon_phi'].content,\n",
    "            mass=df['Muon_mass'].content,\n",
    "            charge=df['Muon_charge'].content,\n",
    "        )\n",
    "\n",
    "        cut = (muons.counts == 2) & (muons['charge'].prod() == -1)        \n",
    "        dimuons = muons[cut].choose(2)\n",
    "        \n",
    "        output[\"sumw\"][dataset] += df.size\n",
    "        output[\"mass\"].fill(\n",
    "            dataset=dataset,\n",
    "            mass=dimuons.mass.flatten(),\n",
    "        )\n",
    "\n",
    "        return output\n",
    "\n",
    "    def postprocess(self, accumulator):\n",
    "        return accumulator"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we were to just use bare uproot to execute this processor, we could do that with the following example, which:\n",
    "\n",
    " * Opens a CMS open data file\n",
    " * Creates a lazy data frame (roughly equivalent to [uproot.lazyarrays](https://uproot.readthedocs.io/en/latest/opening-files.html#uproot.tree.lazyarrays) but with some specializations needed for othere execution environments)\n",
    " * Creates a `MyProcessor` instance\n",
    " * Runs the `process()` function, which returns our accumulators\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'sumw': defaultdict_accumulator(float, {'DoubleMuon': 10000.0}),\n",
       " 'mass': <Hist (dataset,mass) instance at 0x1074336d0>}"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import uproot\n",
    "\n",
    "filename = \"root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root\"\n",
    "file = uproot.open(filename)\n",
    "df = processor.LazyDataFrame(\n",
    "    tree=file[\"Events\"],\n",
    "    entrystart=0,\n",
    "    entrystop=10000,\n",
    ")\n",
    "df[\"dataset\"] = \"DoubleMuon\"\n",
    "p = MyProcessor()\n",
    "out = p.process(df)\n",
    "out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One could expand on this code to run over several chunks of the file, setting `entrystart` and `entrystop` as appropriate. Then, several datasets could be processed by iterating over several files. However, [run_uproot_job](https://coffeateam.github.io/coffea/api/coffea.processor.run_uproot_job.html#coffea.processor.run_uproot_job) can help with this. One lists the datasets and corresponding files, the processor they want to run, and which executor they want to use. Available executors are listed [here](https://coffeateam.github.io/coffea/modules/coffea.processor.html#functions). Since these files are very large, we limit to just reading the first few chunks of events from each dataset with `maxchunks`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e8cfeaac1dd14b4a8ba2a9c46c64faa1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Processing', max=8, style=ProgressStyle(description_width='in…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'sumw': defaultdict_accumulator(float,\n",
       "                         {'ZZ to 4mu': 399752.0, 'DoubleMuon': 400224.0}),\n",
       " 'mass': <Hist (dataset,mass) instance at 0x12337e110>}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fileset = {\n",
    "    'DoubleMuon': [\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root',\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012C_DoubleMuParked.root',\n",
    "    ],\n",
    "    'ZZ to 4mu': [\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/ZZTo4mu.root'\n",
    "    ]\n",
    "}\n",
    "\n",
    "out = processor.run_uproot_job(\n",
    "    fileset,\n",
    "    treename=\"Events\",\n",
    "    processor_instance=MyProcessor(),\n",
    "    executor=processor.iterative_executor,\n",
    "    maxchunks=4,\n",
    ")\n",
    "out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, if we want to use more than a single core on our machine, we simply change [iterative_executor](https://coffeateam.github.io/coffea/api/coffea.processor.iterative_executor.html) for [futures_executor](https://coffeateam.github.io/coffea/api/coffea.processor.futures_executor.html), which uses the python [concurrent.futures](https://docs.python.org/3/library/concurrent.futures.html) standard library. Optional arguments to these executors can be provided via `executor_args` parameter of `run_uproot_job`, such as the number of cores to use (2):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7167c2d0bec14069857a18d004f616d6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Processing', max=8, style=ProgressStyle(description_width='in…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'sumw': defaultdict_accumulator(float,\n",
       "                         {'ZZ to 4mu': 399752.0, 'DoubleMuon': 400224.0}),\n",
       " 'mass': <Hist (dataset,mass) instance at 0x106bb6890>}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out = processor.run_uproot_job(\n",
    "    fileset,\n",
    "    treename=\"Events\",\n",
    "    processor_instance=MyProcessor(),\n",
    "    executor=processor.futures_executor,\n",
    "    executor_args={'workers': 2},\n",
    "    maxchunks=4,\n",
    ")\n",
    "out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hopefully this ran faster than the previous cell, but that may depend on how many cores are available on the machine you are running this notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting fancy\n",
    "Let's flesh out this analysis into a 4-muon analysis, searching for diboson events:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import awkward as ak\n",
    "\n",
    "class FancyDimuonProcessor(processor.ProcessorABC):\n",
    "    def __init__(self):\n",
    "        dataset_axis = hist.Cat(\"dataset\", \"Primary dataset\")\n",
    "        mass_axis = hist.Bin(\"mass\", r\"$m_{\\mu\\mu}$ [GeV]\", 600, 0.25, 300)\n",
    "        pt_axis = hist.Bin(\"pt\", r\"$p_{T,\\mu}$ [GeV]\", 3000, 0.25, 300)\n",
    "        \n",
    "        self._accumulator = processor.dict_accumulator({\n",
    "            'mass': hist.Hist(\"Counts\", dataset_axis, mass_axis),\n",
    "            'mass_near': hist.Hist(\"Counts\", dataset_axis, mass_axis),\n",
    "            'mass_far': hist.Hist(\"Counts\", dataset_axis, mass_axis),\n",
    "            'pt_lead': hist.Hist(\"Counts\", dataset_axis, pt_axis),\n",
    "            'pt_trail': hist.Hist(\"Counts\", dataset_axis, pt_axis),\n",
    "            'cutflow': processor.defaultdict_accumulator(int),\n",
    "        })\n",
    "    \n",
    "    @property\n",
    "    def accumulator(self):\n",
    "        return self._accumulator\n",
    "    \n",
    "    def process(self, df):\n",
    "        output = self.accumulator.identity()\n",
    "        \n",
    "        dataset = df['dataset']\n",
    "        muons = JaggedCandidateArray.candidatesfromcounts(\n",
    "            df['nMuon'],\n",
    "            pt=df['Muon_pt'],\n",
    "            eta=df['Muon_eta'],\n",
    "            phi=df['Muon_phi'],\n",
    "            mass=df['Muon_mass'],\n",
    "            charge=df['Muon_charge'],\n",
    "            softId=df['Muon_softId'],\n",
    "            tightId=df['Muon_tightId']\n",
    "            )        \n",
    "        \n",
    "        output['cutflow']['all events'] += muons.size\n",
    "        \n",
    "        soft_id = (muons.softId > 0)\n",
    "        muons = muons[soft_id]\n",
    "        output['cutflow']['soft id'] += soft_id.any().sum()\n",
    "        \n",
    "        twomuons = (muons.counts >= 2)\n",
    "        output['cutflow']['two muons'] += twomuons.sum()\n",
    "        \n",
    "        dimuons = muons[twomuons].distincts()\n",
    "        \n",
    "        twodimuons = (dimuons.counts >= 2)\n",
    "        output['cutflow']['>= two dimuons'] += twodimuons.sum()\n",
    "        dimuons = dimuons[twodimuons]\n",
    "        \n",
    "        opposite_charge = (dimuons.i0['charge'] * dimuons.i1['charge'] == -1)\n",
    "        \n",
    "        dimuons = dimuons[opposite_charge]\n",
    "        output['cutflow']['opposite charge'] += opposite_charge.any().sum()\n",
    "        \n",
    "        mass_20GeV = (dimuons.mass > 35)\n",
    "        dimuons = dimuons[mass_20GeV]\n",
    "        \n",
    "        exactlytwodimuons = (dimuons.counts == 2)\n",
    "        output['cutflow']['== two dimuons'] += exactlytwodimuons.sum()\n",
    "        dimuons = dimuons[exactlytwodimuons].compact()\n",
    "        \n",
    "        leading_mu = (dimuons.i0.pt.content > dimuons.i1.pt.content)\n",
    "        pt_lead = ak.JaggedArray.fromoffsets(\n",
    "            dimuons.offsets,\n",
    "            np.where(leading_mu, dimuons.i0.pt.content, dimuons.i1.pt.content)\n",
    "        )\n",
    "        pt_trail = ak.JaggedArray.fromoffsets(\n",
    "            dimuons.offsets,\n",
    "            np.where(~leading_mu, dimuons.i0.pt.content, dimuons.i1.pt.content)\n",
    "        )\n",
    "        \n",
    "        near_z = np.abs(dimuons.mass - 91.118).argmin()\n",
    "        far_z = np.abs(dimuons.mass - 91.118).argmax()\n",
    "        \n",
    "        output['mass'].fill(dataset=dataset,\n",
    "                            mass=dimuons.p4.sum().mass)\n",
    "        output['mass_near'].fill(dataset=dataset, \n",
    "                                 mass=dimuons.mass[near_z].flatten())\n",
    "        output['mass_far'].fill(dataset=dataset, \n",
    "                                mass=dimuons.mass[far_z].flatten())\n",
    "        output['pt_lead'].fill(dataset=dataset,\n",
    "                               pt=pt_lead.flatten())\n",
    "        output['pt_trail'].fill(dataset=dataset,\n",
    "                                pt=pt_trail.flatten())\n",
    "        return output\n",
    "\n",
    "    def postprocess(self, accumulator):\n",
    "        return accumulator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9b7d0eb45c0e456aa7a9a52889536aeb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(IntProgress(value=0, description='Processing', max=20, style=ProgressStyle(description_width='i…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "{'mass': <Hist (dataset,mass) instance at 0x106bb6dd0>, 'mass_near': <Hist (dataset,mass) instance at 0x106bb6710>, 'mass_far': <Hist (dataset,mass) instance at 0x106bb6b50>, 'pt_lead': <Hist (dataset,pt) instance at 0x106bb6f10>, 'pt_trail': <Hist (dataset,pt) instance at 0x106bb6910>, 'cutflow': defaultdict_accumulator(<class 'int'>, {'all events': 1999940, 'soft id': 1803995, 'two muons': 1394358, '>= two dimuons': 584764, 'opposite charge': 576563, '== two dimuons': 158843})}\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "tstart = time.time()    \n",
    "\n",
    "fileset = {\n",
    "    'DoubleMuon': [\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012B_DoubleMuParked.root',\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/Run2012C_DoubleMuParked.root',\n",
    "    ],\n",
    "    'ZZ to 4mu': [\n",
    "        'root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod/ZZTo4mu.root'\n",
    "    ]\n",
    "}\n",
    "\n",
    "output = processor.run_uproot_job(\n",
    "    fileset,\n",
    "    treename='Events',\n",
    "    processor_instance=FancyDimuonProcessor(),\n",
    "    executor=processor.futures_executor,\n",
    "    executor_args={'workers': 6, 'flatten': True},\n",
    "    chunksize=100000,\n",
    "    maxchunks=10,\n",
    ")\n",
    "\n",
    "elapsed = time.time() - tstart\n",
    "print(output)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What follows is just us looking at the output, you can execute it if you wish"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 3000.0)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "ax = hist.plot1d(output['mass'], overlay='dataset')\n",
    "ax.set_xlim(70,150)\n",
    "ax.set_ylim(0, 3000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 7500.0)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(output['mass_near'], overlay='dataset')\n",
    "ax.set_xlim(60,120)\n",
    "ax.set_ylim(0.1, 7500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 8000)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(output['mass_far'], overlay='dataset')\n",
    "ax.set_yscale('log')\n",
    "ax.set_ylim(0.1, 8000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 5000.0)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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HwsoxhhjPGEBxRhjjCcsoBhjCtrEWQuYOGtBvothUmABxRjToYRS448YMYKjjz6au+++m2AwmPH5QgkqY02aNInnnnsu6WsnTZpE586doyYm3njjjYgI27dvz7hM+WIBxRjToYTSuixfvpy//vWvvPbaa8ycOTNv5TniiCN48cUXAQgGg7z11lvh2fztjQUUY0yH1atXL2bPns3999+PqlJfX8/kyZMZOXIkY8aM4e233wbg0Ucf5frrrw+/7rzzzmPevHnh5//6r//KiBEj+MY3vsG2bdtaXGfx4sWMHz+esWPHctZZZ7Fp06bwvksuuYRnnnkGcNLwn3TSSZSWOmkW16xZw1FHHRU+9q677grnH1uyZAnHH388o0aN4sILL2TXrl2As9DXz372M8aNG8eQIUNyOnvekkMaY/Ji5svLWbGxtsX2FZuit9U1OIkdR854PWr78L4HtHjt8EMO4LbzR6RVjsGDBxMIBNi6dSt/+tOfEBE+/vhjPvvsM84880w+//zzpK/ft28f1dXV3HPPPfzqV79i5syZ3H///eH9TU1N3HDDDbz44ov07NmTZ555hl/84hfMmTMHgCFDhvDSSy+xa9cunn76aS677LKo/F+JXHHFFdx3332MHz+e6dOnM3PmTO69917AWSRs4cKFvPrqq8ycOZM33ngjrd9Jpgo+oIjIMODHwMHAm6r6UJ6LZIwpUvPnz+eGG24AYOjQoQwYMKDVgFJSUsLEiRMBuOyyy7joooui9q9cuZJPPvmEb37zmwAEAgH69u0bdcxFF13En//8Zz744ANmzZrVajlramrYvXs348ePB+DKK6+MmoQZKsPYsWPDqftzIS8BRUTmAOcBW1X1qIjtZwO/A3zAf6nqHar6KXCtiJQAjwMWUIwpAqnWJEIjvJ655oSslGP16tX4fD569eqV8JjS0tKojvt46ehDRCTquaoyYsQIFixIPFJt4sSJjB07liuvvDIq1Us6140USt3v8/myuqRxrHz1oTwKnB25QUR8wAPAt4DhwKUiMtzdNwGYC7ya22IaY4rZtm3buPbaa7n++usREU455RSefPJJAD7//HPWrVvHkUceycCBA1myZAnBYJD169ezcOHC8DmCwWB4NNdTTz3FySefHHWNI488km3btoUDSlNTU9TCXgADBgzg9ttv57rrrova3rt3b7Zu3cqO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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(output['pt_lead'], overlay='dataset')\n",
    "ax.set_yscale('log')\n",
    "ax.set_ylim(0.1, 5e3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 20000.0)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = hist.plot1d(output['pt_trail'], overlay='dataset')\n",
    "ax.set_yscale('log')\n",
    "ax.set_ylim(0.1, 2e4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Events/s: 31703.135042905807\n"
     ]
    }
   ],
   "source": [
    "print(\"Events/s:\", output['cutflow']['all events']/elapsed)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
